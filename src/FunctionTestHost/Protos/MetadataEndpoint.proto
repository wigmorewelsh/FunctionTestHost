syntax = "proto3";

package MetadataEndpoint;

option csharp_namespace = "FunctionMetadataEndpoint";

//import "protos-az/source/proto/FunctionRpc.proto";


// Interface exported by the server.
service FunctionRpc {
  rpc EventStream (stream StreamingMessage) returns (stream StreamingMessage) {}
}

message StreamingMessage {
  // Used to identify message between host and worker
  string request_id = 1;

  // Payload of the message
  oneof content {
    Ping ping = 2;
    FunctionsMetadataRequest functions_metadata_request = 29;
    FunctionMetadataResponses function_metadata_responses = 30;

  }
}

message Ping {
  string worker_id = 1;
}

// Host tells worker it is ready to receive metadata
message FunctionsMetadataRequest {
  // base directory for function app
  string function_app_directory = 1;
}

// Worker sends function metadata back to host
message FunctionMetadataResponses {
  // list of function indexing responses
  repeated FunctionLoadRequest function_load_requests_results = 1;

  // status of overall metadata request
  StatusResult result = 2;
}

// Host tells the worker to load a Function
message FunctionLoadRequest {
  // unique function identifier (avoid name collisions, facilitate reload case)
  string function_id = 1;

  // Metadata for the request
  RpcFunctionMetadata metadata = 2;

  // A flag indicating if managed dependency is enabled or not
  bool managed_dependency_enabled = 3;
}


// Used by the host to determine success/failure/cancellation
message StatusResult {
  // Indicates Failure/Success/Cancelled
  enum Status {
    Failure = 0;
    Success = 1;
    Cancelled = 2;
  }
  // Status for the given result
  Status status = 4;

  // Specific message about the result
  string result = 1;

  // Exception message (if exists) for the status
  RpcException exception = 2;

  // Captured logs or relevant details can use the logs property
  repeated RpcLog logs = 3;
}


// Used to send logs back to the Host 
message RpcLog {
  // Matching ILogger semantics
  // https://github.com/aspnet/Logging/blob/9506ccc3f3491488fe88010ef8b9eb64594abf95/src/Microsoft.Extensions.Logging/Logger.cs
  // Level for the Log
  enum Level {
    Trace = 0;
    Debug = 1;
    Information = 2;
    Warning = 3;
    Error = 4;
    Critical = 5;
    None = 6;
  }

  // Category of the log. Defaults to User if not specified.
  enum RpcLogCategory {
    User = 0;
    System = 1;
  }

  // Unique id for invocation (if exists)
  string invocation_id = 1;

  // TOD: This should be an enum
  // Category for the log (startup, load, invocation, etc.)
  string category = 2;

  // Level for the given log message
  Level level = 3;

  // Message for the given log
  string message = 4;

  // Id for the even associated with this log (if exists)
  string event_id = 5;

  // Exception (if exists)
  RpcException exception = 6;

  // json serialized property bag, or could use a type scheme like map<string, TypedData>
  string properties = 7;

  // Category of the log. Either user(default) or system.
  RpcLogCategory log_category = 8;
}


// Encapsulates an Exception 
message RpcException {
  // Source of the exception
  string source = 3;

  // Stack trace for the exception
  string stack_trace = 1;

  // Textual message describing the exception
  string message = 2;
}

// Information on how a Function should be loaded and its bindings
message RpcFunctionMetadata {
  // TODO: do we want the host's name - the language worker might do a better job of assignment than the host
  string name = 4;

  // base directory for the Function
  string directory = 1;

  // Script file specified
  string script_file = 2;

  // Entry point specified
  string entry_point = 3;

  // Bindings info
  map<string, BindingInfo> bindings = 6;

  // Is set to true for proxy
  bool is_proxy = 7;
}


// Used to describe a given binding on load
message BindingInfo {
  // Indicates whether it is an input or output binding (or a fancy inout binding)
  enum Direction {
    in = 0;
    out = 1;
    inout = 2;
  }

  // Indicates the type of the data for the binding
  enum DataType {
    undefined = 0;
    string = 1;
    binary = 2;
    stream = 3;
  }

  // Type of binding (e.g. HttpTrigger)
  string type = 2;

  // Direction of the given binding
  Direction direction = 3;

  DataType data_type = 4;
}

